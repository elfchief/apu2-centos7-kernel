diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/arch/x86/configs/x86_64_defconfig linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/arch/x86/configs/x86_64_defconfig
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/arch/x86/configs/x86_64_defconfig	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/arch/x86/configs/x86_64_defconfig	2016-09-05 17:21:29.119198125 -0700
@@ -306,3 +306,4 @@
 CONFIG_SECURITY_SELINUX_BOOTPARAM=y
 CONFIG_SECURITY_SELINUX_DISABLE=y
 # CONFIG_CRYPTO_ANSI_CPRNG is not set
+CONFIG_GPIO_GENERIC_PLATFORM_IOPORT=y
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/Kconfig linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/Kconfig
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/Kconfig	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/Kconfig	2016-09-05 18:26:36.128275807 -0700
@@ -82,7 +82,14 @@
 	  exported to userspace; this can be useful when debugging.
 
 config GPIO_GENERIC
-	tristate
+	tristate "Generic memory-mapped GPIO functionality"
+	help
+	  Say yes to include the gpio-generic module
+
+config GPIO_GENERIC_IOPORT
+	tristate "Generic ioport GPIO functionality"
+	help
+	  Say yes to include the gpio-ioport module	
 
 # put drivers in the right section, in alphabetical order
 
@@ -113,11 +120,17 @@
 	depends on ARCH_CLPS711X
 
 config GPIO_GENERIC_PLATFORM
-	tristate "Generic memory-mapped GPIO controller support (MMIO platform device)"
-	select GPIO_GENERIC
+	bool "Generic memory-mapped GPIO controller support (MMIO platform device)"
+	depends on GPIO_GENERIC
 	help
 	  Say yes here to support basic platform_device memory-mapped GPIO controllers.
 
+config GPIO_GENERIC_PLATFORM_IOPORT
+	bool "Generic IO-port based GPIO controller support (ioport platform device)"
+	depends on GPIO_GENERIC_IOPORT
+	help
+	  Say yes here to support basic platform_device IO-port-based GPIO controllers.
+
 config GPIO_IT8761E
 	tristate "IT8761E GPIO support"
 	depends on X86  # unconditional access to IO space.
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/Makefile linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/Makefile
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/Makefile	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/Makefile	2016-09-04 13:04:24.577447977 -0700
@@ -9,6 +9,7 @@
 
 # Device drivers. Generally keep list sorted alphabetically
 obj-$(CONFIG_GPIO_GENERIC)	+= gpio-generic.o
+obj-$(CONFIG_GPIO_GENERIC_IOPORT) += gpio-ioport.o
 
 obj-$(CONFIG_GPIO_74X164)	+= gpio-74x164.o
 obj-$(CONFIG_GPIO_ADNP)		+= gpio-adnp.o
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/gpio-ioport.c linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/gpio-ioport.c
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/gpio/gpio-ioport.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/gpio/gpio-ioport.c	2016-09-05 18:28:48.997066569 -0700
@@ -0,0 +1,555 @@
+/*
+ * Generic driver for ioport-mapped GPIO controllers.
+ *
+ * Originally from gpio-generic, which only handles plain mmap'd io.
+ * Original credits for that:
+ *     Copyright 2008 MontaVista Software, Inc.
+ *     Copyright 2008,2010 Anton Vorontsov <cbouatmailru@gmail.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * The simplest form of a GPIO controller that the driver supports is
+ * just a single "data" register, where GPIO state can be read and/or
+ * written.
+ *
+ * A bit more sophisticated controllers with a pair of set/clear-bit 
+ * registers affecting the data register and the output pins are also
+ * supported.
+ *
+ * The driver supports big-endian notation, just register the device
+ * with the -be suffix.
+ *
+ * 8, 16, 32, and 64-bit registers are (eventually) supported, and
+ * the number of GPIOs is determined by the width of the registers.
+ *
+ * This module could probably be somewhat trivially merged with 
+ * gpio-generic if that was desirable.
+ *
+ * Map your ioports with ioport_map before porting this at 'em
+ */
+
+// FIXME: Probably don't need all these
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/bug.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/spinlock.h>
+#include <linux/compiler.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/log2.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/mod_devicetable.h>
+#include <linux/basic_ioport_gpio.h>
+
+static void pgpio_write8(void __iomem *reg, unsigned long data)
+{
+    iowrite8(data, reg);
+}
+
+static unsigned long pgpio_read8(void __iomem *reg)
+{
+    return ioread8(reg);
+}
+
+static void pgpio_write16(void __iomem *reg, unsigned long data)
+{
+    iowrite16(data, reg);
+}
+
+static unsigned long pgpio_read16(void __iomem *reg)
+{
+    return ioread16(reg);
+}
+
+static void pgpio_write32(void __iomem *reg, unsigned long data)
+{
+    iowrite32(data, reg);
+}
+
+static unsigned long pgpio_read32(void __iomem *reg)
+{
+    return ioread32(reg);
+}
+
+// #if BITS_PER_LONG >= 64
+#if 0
+static void pgpio_write64(void __iomem *reg, unsigned long data)
+{
+    iowrite64(data, reg);
+}
+
+static unsigned long pgpio_read64(void __iomem *reg)
+{
+    return ioread64(reg);
+}
+#endif /* BITS_PER_LONG >= 64 */
+
+static void pgpio_write16be(void __iomem *reg, unsigned long data)
+{
+    iowrite16be(data, reg);
+}
+
+static unsigned long pgpio_read16be(void __iomem *reg)
+{
+    return ioread16be(reg);
+}
+
+static void pgpio_write32be(void __iomem *reg, unsigned long data)
+{
+    iowrite32be(data, reg);
+}
+
+static unsigned long pgpio_read32be(void __iomem *reg)
+{
+    return ioread32be(reg);
+}
+
+static unsigned long pgpio_pin2mask(struct pgpio_chip *pgc, unsigned int pin)
+{
+    return 1 << pin;
+}
+
+static unsigned long pgpio_pin2mask_be(struct pgpio_chip *pgc,
+                       unsigned int pin)
+{
+    return 1 << (pgc->bits - 1 - pin);
+}
+
+static int pgpio_get(struct gpio_chip *gc, unsigned int gpio)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+
+    return pgc->read_reg(pgc->reg_dat) & pgc->pin2mask(pgc, gpio);
+}
+
+static void pgpio_set(struct gpio_chip *gc, unsigned int gpio, int val)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long mask = pgc->pin2mask(pgc, gpio);
+    unsigned long flags;
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    if (val)
+        pgc->data |= mask;
+    else
+        pgc->data &= ~mask;
+
+    pgc->write_reg(pgc->reg_dat, pgc->data);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+}
+
+static void pgpio_set_with_clear(struct gpio_chip *gc, unsigned int gpio,
+                 int val)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long mask = pgc->pin2mask(pgc, gpio);
+
+    if (val)
+        pgc->write_reg(pgc->reg_set, mask);
+    else
+        pgc->write_reg(pgc->reg_clr, mask);
+}
+
+static void pgpio_set_set(struct gpio_chip *gc, unsigned int gpio, int val)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long mask = pgc->pin2mask(pgc, gpio);
+    unsigned long flags;
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    if (val)
+        pgc->data |= mask;
+    else
+        pgc->data &= ~mask;
+
+    pgc->write_reg(pgc->reg_set, pgc->data);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+}
+
+static int pgpio_simple_dir_in(struct gpio_chip *gc, unsigned int gpio)
+{
+    return 0;
+}
+
+static int pgpio_simple_dir_out(struct gpio_chip *gc, unsigned int gpio,
+                int val)
+{
+    gc->set(gc, gpio, val);
+
+    return 0;
+}
+
+static int pgpio_dir_in(struct gpio_chip *gc, unsigned int gpio)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long flags;
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    pgc->dir &= ~pgc->pin2mask(pgc, gpio);
+    pgc->write_reg(pgc->reg_dir, pgc->dir);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+
+    return 0;
+}
+
+static int pgpio_dir_out(struct gpio_chip *gc, unsigned int gpio, int val)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long flags;
+
+    gc->set(gc, gpio, val);
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    pgc->dir |= pgc->pin2mask(pgc, gpio);
+    pgc->write_reg(pgc->reg_dir, pgc->dir);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+
+    return 0;
+}
+
+static int pgpio_dir_in_inv(struct gpio_chip *gc, unsigned int gpio)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long flags;
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    pgc->dir |= pgc->pin2mask(pgc, gpio);
+    pgc->write_reg(pgc->reg_dir, pgc->dir);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+
+    return 0;
+}
+
+static int pgpio_dir_out_inv(struct gpio_chip *gc, unsigned int gpio, int val)
+{
+    struct pgpio_chip *pgc = to_pgpio_chip(gc);
+    unsigned long flags;
+
+    gc->set(gc, gpio, val);
+
+    spin_lock_irqsave(&pgc->lock, flags);
+
+    pgc->dir &= ~pgc->pin2mask(pgc, gpio);
+    pgc->write_reg(pgc->reg_dir, pgc->dir);
+
+    spin_unlock_irqrestore(&pgc->lock, flags);
+
+    return 0;
+}
+
+static int pgpio_setup_accessors(struct device *dev,
+                 struct pgpio_chip *pgc,
+                 bool bit_be,
+                 bool byte_be)
+{
+
+    switch (pgc->bits) {
+    case 8:
+        pgc->read_reg   = pgpio_read8;
+        pgc->write_reg  = pgpio_write8;
+        break;
+    case 16:
+        if (byte_be) {
+            pgc->read_reg   = pgpio_read16be;
+            pgc->write_reg  = pgpio_write16be;
+        } else {
+            pgc->read_reg   = pgpio_read16;
+            pgc->write_reg  = pgpio_write16;
+        }
+        break;
+    case 32:
+        if (byte_be) {
+            pgc->read_reg   = pgpio_read32be;
+            pgc->write_reg  = pgpio_write32be;
+        } else {
+            pgc->read_reg   = pgpio_read32;
+            pgc->write_reg  = pgpio_write32;
+        }
+        break;
+// #if BITS_PER_LONG >= 64
+#if 0
+    case 64:
+        if (byte_be) {
+            dev_err(dev,
+                "64 bit big endian byte order unsupported\n");
+            return -EINVAL;
+        } else {
+            pgc->read_reg   = pgpio_read64;
+            pgc->write_reg  = pgpio_write64;
+        }
+        break;
+#endif /* BITS_PER_LONG >= 64 */
+    default:
+        dev_err(dev, "unsupported data width %u bits\n", pgc->bits);
+        return -EINVAL;
+    }
+
+    pgc->pin2mask = bit_be ? pgpio_pin2mask_be : pgpio_pin2mask;
+
+    return 0;
+}
+
+/*
+ * Create the device and allocate the resources.  For setting GPIO's there are
+ * three supported configurations:
+ *
+ *  - single input/output register resource (named "dat").
+ *  - set/clear pair (named "set" and "clr").
+ *  - single output register resource and single input resource ("set" and
+ *  dat").
+ *
+ * For the single output register, this drives a 1 by setting a bit and a zero
+ * by clearing a bit.  For the set clr pair, this drives a 1 by setting a bit
+ * in the set register and clears it by setting a bit in the clear register.
+ * The configuration is detected by which resources are present.
+ *
+ * For setting the GPIO direction, there are three supported configurations:
+ *
+ *  - simple bidirection GPIO that requires no configuration.
+ *  - an output direction register (named "dirout") where a 1 bit
+ *  indicates the GPIO is an output.
+ *  - an input direction register (named "dirin") where a 1 bit indicates
+ *  the GPIO is an input.
+ */
+static int pgpio_setup_io(struct pgpio_chip *pgc,
+              void __iomem *dat,
+              void __iomem *set,
+              void __iomem *clr)
+{
+
+    pgc->reg_dat = dat;
+    if (!pgc->reg_dat)
+        return -EINVAL;
+
+    if (set && clr) {
+        pgc->reg_set = set;
+        pgc->reg_clr = clr;
+        pgc->gc.set = pgpio_set_with_clear;
+    } else if (set && !clr) {
+        pgc->reg_set = set;
+        pgc->gc.set = pgpio_set_set;
+    } else {
+        pgc->gc.set = pgpio_set;
+    }
+
+    pgc->gc.get = pgpio_get;
+
+    return 0;
+}
+
+static int pgpio_setup_direction(struct pgpio_chip *pgc,
+                 void __iomem *dirout,
+                 void __iomem *dirin)
+{
+    if (dirout && dirin) {
+        return -EINVAL;
+    } else if (dirout) {
+        pgc->reg_dir = dirout;
+        pgc->gc.direction_output = pgpio_dir_out;
+        pgc->gc.direction_input = pgpio_dir_in;
+    } else if (dirin) {
+        pgc->reg_dir = dirin;
+        pgc->gc.direction_output = pgpio_dir_out_inv;
+        pgc->gc.direction_input = pgpio_dir_in_inv;
+    } else {
+        pgc->gc.direction_output = pgpio_simple_dir_out;
+        pgc->gc.direction_input = pgpio_simple_dir_in;
+    }
+
+    return 0;
+}
+
+int pgpio_remove(struct pgpio_chip *pgc)
+{
+    return gpiochip_remove(&pgc->gc);
+}
+EXPORT_SYMBOL_GPL(pgpio_remove);
+
+int pgpio_init(struct pgpio_chip *pgc, struct device *dev,
+           unsigned long sz, void __iomem *dat, void __iomem *set,
+           void __iomem *clr, void __iomem *dirout, void __iomem *dirin,
+           unsigned long flags)
+{
+    int ret;
+
+    if (!is_power_of_2(sz))
+        return -EINVAL;
+
+    pgc->bits = sz * 8;
+    if (pgc->bits > BITS_PER_LONG)
+        return -EINVAL;
+
+    spin_lock_init(&pgc->lock);
+    pgc->gc.dev = dev;
+    pgc->gc.label = dev_name(dev);
+    pgc->gc.base = -1;
+    pgc->gc.ngpio = pgc->bits;
+
+    ret = pgpio_setup_io(pgc, dat, set, clr);
+    if (ret)
+        return ret;
+
+    ret = pgpio_setup_accessors(dev, pgc, flags & PGPIOF_BIG_ENDIAN,
+                    flags & PGPIOF_BIG_ENDIAN_BYTE_ORDER);
+    if (ret)
+        return ret;
+
+    ret = pgpio_setup_direction(pgc, dirout, dirin);
+    if (ret)
+        return ret;
+
+    pgc->data = pgc->read_reg(pgc->reg_dat);
+    if (pgc->gc.set == pgpio_set_set &&
+            !(flags & PGPIOF_UNREADABLE_REG_SET))
+        pgc->data = pgc->read_reg(pgc->reg_set);
+    if (pgc->reg_dir && !(flags & PGPIOF_UNREADABLE_REG_DIR))
+        pgc->dir = pgc->read_reg(pgc->reg_dir);
+
+    return ret;
+}
+EXPORT_SYMBOL_GPL(pgpio_init);
+
+#ifdef CONFIG_GPIO_GENERIC_PLATFORM_IOPORT
+
+static void __iomem *pgpio_map(struct platform_device *pdev,
+                    struct resource *base,
+                    const char *name,
+                    int *err)
+{
+    struct device *dev = &pdev->dev;
+    struct resource *r;
+    resource_size_t sz, offset;
+    void __iomem *ret;
+
+    *err = 0;
+
+    r = platform_get_resource_byname(pdev, IORESOURCE_REG, name);
+    if (!r)
+        return NULL;
+
+    sz = resource_size(r);
+    offset = r->start;
+
+    if (!devm_request_region(dev, base->start + offset, sz, r->name)) {
+        *err = -EBUSY;
+        return NULL;
+    }
+
+    ret = ioport_map(base->start + offset, sz);
+    if (!ret) {
+        *err = -ENOMEM;
+        return NULL;
+    }
+
+    return ret;
+}
+
+static int pgpio_pdev_probe(struct platform_device *pdev)
+{
+    struct device *dev = &pdev->dev;
+    struct resource *r;
+    void __iomem *dat;
+    void __iomem *set;
+    void __iomem *clr;
+    void __iomem *dirout;
+    void __iomem *dirin;
+    unsigned long flags = 0;
+    int err;
+    struct pgpio_chip *pgc;
+    struct pgpio_pdata *pdata = dev_get_platdata(dev);
+
+    if (!pdata || pdata->ngpio <= 0) {
+        return -EINVAL;
+    }
+
+    r = platform_get_resource_byname(pdev, IORESOURCE_IO, "gpio");
+    if (!r)
+        return -EINVAL;
+
+    dat = pgpio_map(pdev, r, "dat", &err);
+    if (!dat)
+        return err;
+
+    set = pgpio_map(pdev, r, "set", &err);
+    if (err)
+        return err;
+
+    clr = pgpio_map(pdev, r, "clr", &err);
+    if (err)
+        return err;
+
+    dirout = pgpio_map(pdev, r, "dirout", &err);
+    if (err)
+        return err;
+
+    dirin = pgpio_map(pdev, r, "dirin", &err);
+    if (err)
+        return err;
+
+    if (!strcmp(platform_get_device_id(pdev)->name, "basic-ioport-gpio-be"))
+        flags |= PGPIOF_BIG_ENDIAN;
+
+    pgc = devm_kzalloc(&pdev->dev, sizeof(*pgc), GFP_KERNEL);
+    if (!pgc)
+        return -ENOMEM;
+
+    err = pgpio_init(pgc, dev, pdata->ngpio / 8, dat, set, clr, dirout, dirin, flags);
+    if (err)
+        return err;
+
+    pgc->gc.base = pdata->base;
+
+    platform_set_drvdata(pdev, pgc);
+
+    return gpiochip_add(&pgc->gc);
+}
+
+static int pgpio_pdev_remove(struct platform_device *pdev)
+{
+    struct pgpio_chip *pgc = platform_get_drvdata(pdev);
+
+    return pgpio_remove(pgc);
+}
+
+static const struct platform_device_id pgpio_id_table[] = {
+    { "basic-ioport-gpio", },
+    { "basic-ioport-gpio-be", },
+    {},
+};
+MODULE_DEVICE_TABLE(platform, pgpio_id_table);
+
+static struct platform_driver pgpio_driver = {
+    .driver = {
+        .name = "basic-ioport-gpio",
+    },
+    .id_table = pgpio_id_table,
+    .probe    = pgpio_pdev_probe,
+    .remove   = pgpio_pdev_remove,
+};
+
+module_platform_driver(pgpio_driver);
+
+#endif /* CONFIG_GPIO_GENERIC_PLATFORM_IOPORT */
+
+MODULE_DESCRIPTION("Driver for basic memory-mapped GPIO controllers");
+MODULE_AUTHOR("Anton Vorontsov <cbouatmailru@gmail.com>");
+MODULE_LICENSE("GPL");
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/Kconfig linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/Kconfig
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/Kconfig	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/Kconfig	2016-09-04 12:39:51.124920275 -0700
@@ -106,6 +106,15 @@
 	  This option enables support for the Soekris net4801 and net4826 error
 	  LED.
 
+config LEDS_NET6501
+	tristate "LED Support for Soekris net6501 series LEDs"
+	depends on LEDS_CLASS
+	depends on X86
+	depends on SOEKRIS_NET6501
+	help
+	  This option enables support for the Soekris net6501 Error and Ready
+	  LED. It does nothing unless the soekris-net6501 driver is loaded too.
+
 config LEDS_FSG
 	tristate "LED Support for the Freecom FSG-3"
 	depends on LEDS_CLASS
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/Makefile linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/Makefile
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/Makefile	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/Makefile	2016-09-04 12:39:51.124920275 -0700
@@ -15,6 +15,7 @@
 obj-$(CONFIG_LEDS_MIKROTIK_RB532)	+= leds-rb532.o
 obj-$(CONFIG_LEDS_S3C24XX)		+= leds-s3c24xx.o
 obj-$(CONFIG_LEDS_NET48XX)		+= leds-net48xx.o
+obj-$(CONFIG_LEDS_NET6501)		+= leds-net6501.o
 obj-$(CONFIG_LEDS_WRAP)			+= leds-wrap.o
 obj-$(CONFIG_LEDS_COBALT_QUBE)		+= leds-cobalt-qube.o
 obj-$(CONFIG_LEDS_COBALT_RAQ)		+= leds-cobalt-raq.o
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/leds-net6501.c linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/leds-net6501.c
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/leds/leds-net6501.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/leds/leds-net6501.c	2016-09-04 12:39:51.124920275 -0700
@@ -0,0 +1,127 @@
+/*
+ * LED devices for the Soekris Net6501
+ * http://www.mail-archive.com/soekris-tech@lists.soekris.com/msg06738.html
+ *
+ * Copyright 2012 Chris Wilson <chris+soekris@aptivate.org>
+ * based on leds-hp6xx.c by Kristoffer Ericson <kristoffer.ericson@gmail.com>
+ * parts based on gdrom.c by Adrian McMenamin <adrian@mcmen.demon.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+
+/*
+ * These magic numbers come from a post by Soren Kristensen (the board
+ * designer?) on the soekris mailing list:
+ * http://www.mail-archive.com/soekris-tech@lists.soekris.com/msg06738.html
+ */ 
+#define LED_ERROR 0x069C
+#define LED_READY 0x069D
+#define REGION_START 0x069C
+#define REGION_LEN 2
+
+#define DRIVER_NAME "leds-net6501"
+
+static void net6501_led_error_set(struct led_classdev *led_cdev,
+	enum led_brightness value)
+{
+	u8 old_value, new_value;
+
+	old_value = inb(LED_ERROR);
+	new_value = (old_value & ~1) | (value ? 1 : 0);
+	outb(new_value, LED_ERROR);
+}
+
+static void net6501_led_ready_set(struct led_classdev *led_cdev,
+	enum led_brightness value)
+{
+	u8 old_value, new_value;
+
+	old_value = inb(LED_READY);
+	new_value = (old_value & ~1) | (value ? 1 : 0);
+	outb(new_value, LED_READY);
+}
+
+static struct led_classdev net6501_led_error = {
+	.name			= "net6501:red:error",
+	.default_trigger	= "timer",
+	.brightness_set		= net6501_led_error_set,
+	.flags			= LED_CORE_SUSPENDRESUME,
+};
+
+static struct led_classdev net6501_led_ready = {
+	.name			= "net6501:green:ready",
+	.default_trigger	= NULL,
+	.brightness_set		= net6501_led_ready_set,
+	.flags			= LED_CORE_SUSPENDRESUME,
+};
+
+static int net6501_leds_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	if (!request_region(REGION_START, REGION_LEN, DRIVER_NAME))
+	{
+		printk(KERN_WARNING DRIVER_NAME ": I/O region 0x%x-0x%x "
+			"is busy\n", REGION_START,
+			REGION_START + REGION_LEN - 1);
+		return -EBUSY;
+	}
+
+	ret = led_classdev_register(&pdev->dev, &net6501_led_error);
+	if (ret < 0)
+	{
+		printk(KERN_WARNING DRIVER_NAME ": failed to register "
+			"error LED device: error %d\n", ret);
+		goto release_registered_region;
+	}
+
+	ret = led_classdev_register(&pdev->dev, &net6501_led_ready);
+	if (ret < 0)
+	{
+		printk(KERN_WARNING DRIVER_NAME ": failed to register "
+			"ready LED device: error %d\n", ret);
+		goto unregister_led_error;
+	}
+
+	return 0;
+
+unregister_led_error:
+	led_classdev_unregister(&net6501_led_error);
+
+release_registered_region:
+	release_region(REGION_START, REGION_LEN);
+
+	return ret;
+}
+
+static int net6501_leds_remove(struct platform_device *pdev)
+{
+	led_classdev_unregister(&net6501_led_ready);
+	led_classdev_unregister(&net6501_led_error);
+	release_region(REGION_START, REGION_LEN);
+	return 0;
+}
+
+static struct platform_driver net6501_leds_driver = {
+	.probe		= net6501_leds_probe,
+	.remove		= net6501_leds_remove,
+	.driver		= {
+		.name		= DRIVER_NAME,
+		.owner		= THIS_MODULE,
+	},
+};
+
+module_platform_driver(net6501_leds_driver);
+
+MODULE_AUTHOR("Chris Wilson <chris+soekris@aptivate.org>");
+MODULE_DESCRIPTION("Soekris Net6051 LED driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRIVER_NAME);
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/Kconfig linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/Kconfig
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/Kconfig	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/Kconfig	2016-09-04 13:08:40.194089771 -0700
@@ -779,6 +779,18 @@
 	  This driver provides support for backlight control on Samsung Q10
 	  and related laptops, including Dell Latitude X200.
 
+config SOEKRIS_NET6501
+	tristate "Soekris Net6501 Extras"
+	depends on X86
+	---help---
+	  This driver provides support for the Ready and Error LEDs on the
+	  Soekris net6501, along with leds-net6501. This driver also provides
+	  support for the GPIO lines on the net6501, when coupled with
+	  gpio-ioport.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called soekris-net6501.
+
 config APPLE_GMUX
 	tristate "Apple Gmux Driver"
 	depends on ACPI
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/Makefile linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/Makefile
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/Makefile	2016-06-27 02:03:38.000000000 -0700
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/Makefile	2016-09-04 12:39:51.124920275 -0700
@@ -50,6 +50,7 @@
 obj-$(CONFIG_INTEL_MID_POWER_BUTTON)	+= intel_mid_powerbtn.o
 obj-$(CONFIG_INTEL_OAKTRAIL)	+= intel_oaktrail.o
 obj-$(CONFIG_SAMSUNG_Q10)	+= samsung-q10.o
+obj-$(CONFIG_SOEKRIS_NET6501)   += soekris-net6501.o
 obj-$(CONFIG_APPLE_GMUX)	+= apple-gmux.o
 obj-$(CONFIG_CHROMEOS_LAPTOP)	+= chromeos_laptop.o
 
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/soekris-net6501.c linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/soekris-net6501.c
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/drivers/platform/x86/soekris-net6501.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/drivers/platform/x86/soekris-net6501.c	2016-09-04 12:50:25.430035986 -0700
@@ -0,0 +1,200 @@
+/*
+ * System Specific setup for Soekris net6501
+ * This means setup of GPIO lines and LEDs on net6501 boards.
+ * 
+ * FIXME: Do we have a way to add the HPET-force-enable to this, too?
+ * 
+ * Based on original work by Chris Wilson <chris+soekris@aptivate.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/string.h>
+#include <linux/module.h>
+#include <linux/leds.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/basic_ioport_gpio.h>
+
+#define BIOS_REGION_BASE        0x000f0000
+#define BIOS_REGION_SIZE        0x00010000
+
+#define BOARD_STRING            "net6501"
+#define NET6501_GPIO_DEVICE     "basic-ioport-gpio"
+#define NET6501_LEDS_DEVICE     "leds-net6501"
+
+#define NET6501_GPIO_BASE       0x0680   /* Base address */
+#define NET6501_GPIO_INPUT_OFF  0x00     /* Input register */
+#define NET6501_GPIO_OUTPUT_OFF 0x04     /* Output register */
+#define NET6501_GPIO_RESET_OFF  0x08     /* Reset output */
+#define NET6501_GPIO_SET_OFF    0x0c     /* Set output*/
+#define NET6501_GPIO_DIR_OFF    0x10     /* Direction register offset (set for output) */
+#define NET6501_GPIO_LEN        20
+#define NET6501_NGPIO           16
+
+#define NET6501_LEDS_BASE       0x069C   /* Start of LEDS */
+#define NET6501_LEDS_ERROR_OFF  0x00     /* Error LED */
+#define NET6501_LEDS_READY_OFF  0x01     /* Ready LED */
+#define NET6501_LEDS_LEN        2
+
+static void net6501_release(struct device *);
+
+
+#if 0    // Not actually using these resources in the LED driver right now
+static struct platform_device net6501_leds_device = {
+    .name           = NET6501_LEDS_DEVICE,
+    .id             = -1,
+    .resource       = net6501_gpio_resources,
+    .num_resources  = ARRAY_SIZE(net6501_gpio_resources),
+};
+
+static struct resource net6501_leds_resources[] = {
+    {
+        .name    = "leds",
+        .start    = NET6501_LEDS_BASE,
+        .end    = NET6501_LEDS_BASE + NET6501_LEDS_LEN - 1,
+        .flags    = IORESOURCE_IO,
+    },
+    {
+        .name    = "error",
+        .start    = NET6501_LEDS_ERROR_OFF,
+        .end    = 0,
+        .flags    = IORESOURCE_REG,
+    },
+    {
+        .name    = "ready",
+        .start    = NET6501_LEDS_READY_OFF,
+        .end     = 0,
+        .flags    = IORESOURCE_REG,
+    }
+};
+#endif
+
+static struct resource net6501_gpio_resources[] = {
+    {
+        .name   = "gpio",
+        .start  = NET6501_GPIO_BASE,
+        .end    = NET6501_GPIO_BASE + NET6501_GPIO_LEN - 1,
+        .flags  = IORESOURCE_IO,
+    },
+    {
+        .name   = "dat",
+        .start  = NET6501_GPIO_INPUT_OFF,
+        .end    = NET6501_GPIO_INPUT_OFF + (NET6501_NGPIO / 8) - 1,
+        .flags  = IORESOURCE_REG,
+    },
+    {
+        .name   = "set",
+        .start  = NET6501_GPIO_SET_OFF,
+        .end    = NET6501_GPIO_SET_OFF + (NET6501_NGPIO / 8) - 1,
+        .flags  = IORESOURCE_REG,
+    },
+    {
+        .name   = "clr",
+        .start  = NET6501_GPIO_RESET_OFF,
+        .end    = NET6501_GPIO_RESET_OFF + (NET6501_NGPIO / 8) - 1,
+        .flags  = IORESOURCE_REG,
+    },
+    {
+        .name   = "dirout",
+        .start  = NET6501_GPIO_DIR_OFF,
+        .end    = NET6501_GPIO_DIR_OFF + (NET6501_NGPIO / 8) - 1,
+        .flags  = IORESOURCE_REG,
+    },
+};
+
+static struct pgpio_pdata net6501_gpio_pdata = {
+    .base = -1,
+    .ngpio = NET6501_NGPIO,
+};
+
+static struct platform_device net6501_gpio_device = {
+    .name           = NET6501_GPIO_DEVICE,
+    .id             = -1,
+    .resource       = net6501_gpio_resources,
+    .num_resources  = ARRAY_SIZE(net6501_gpio_resources),
+    .dev            = {
+        .platform_data  = &net6501_gpio_pdata,
+        .release    = &net6501_release,
+    },
+};
+
+static struct platform_device *net6501_devices[] = {
+    &net6501_gpio_device,
+};
+
+
+static struct platform_device *leds_device;
+static void __init register_net6501(void)
+{
+    platform_add_devices(net6501_devices, ARRAY_SIZE(net6501_devices));
+    leds_device = platform_device_register_simple(NET6501_LEDS_DEVICE, -1, NULL, 0);
+    printk(KERN_INFO "%s: Soekris net6501 board platform devices created\n", KBUILD_MODNAME);
+}
+
+/*
+ * Search for the board string in the BIOS region. This is sloppy, but
+ * I'm not sure of a better way.
+ */
+static bool __init net6501_present(void)
+{
+    unsigned char *rombase, *i;
+    bool found = false;
+
+    rombase = ioremap(BIOS_REGION_BASE, BIOS_REGION_SIZE - 1);
+    if (!rombase) {
+        printk(KERN_ERR "%s: failed to get rombase\n", KBUILD_MODNAME);
+        return found;
+    }
+
+    for (i = rombase; i <= (rombase + BIOS_REGION_SIZE - 7); i++) {
+        if (!memcmp(i, BOARD_STRING, 7)) {
+            printk(KERN_INFO "%s: system recognized as soekris net6501\n", KBUILD_MODNAME);
+            found = true;
+            break;
+        }
+    }
+
+    iounmap(rombase);
+    return found;
+}
+
+static int __init net6501_init(void)
+{
+    if (!net6501_present())
+        return 0;
+
+    register_net6501();
+
+    return 0;
+}
+
+static void net6501_exit(void)
+{
+    int i;
+
+    for (i = 0; i < ARRAY_SIZE(net6501_devices); i++) {
+        platform_device_unregister(net6501_devices[i]);
+    }
+
+    platform_device_unregister(leds_device);
+}
+
+/* Don't -think- we need anything here */
+static void net6501_release(struct device *dev)
+{
+    return;
+}
+
+module_init(net6501_init);
+module_exit(net6501_exit);
+
+MODULE_AUTHOR("someone <someone@example.com>");
+MODULE_DESCRIPTION("Soekris net6501 System Setup");
+MODULE_LICENSE("GPL");
diff -Naur linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/include/linux/basic_ioport_gpio.h linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/include/linux/basic_ioport_gpio.h
--- linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.orig/include/linux/basic_ioport_gpio.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.10.0-327.28.2.el7.wwp_soekris.x86_64.progress/include/linux/basic_ioport_gpio.h	2016-09-04 12:47:46.976011035 -0700
@@ -0,0 +1,77 @@
+/*
+ * Basic ioport-mapped GPIO controllers.
+ *
+ * Copyright 2008 MontaVista Software, Inc.
+ * Copyright 2008,2010 Anton Vorontsov <cbouatmailru@gmail.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#ifndef __BASIC_PORTIO_GPIO_H
+#define __BASIC_PORTIO_GPIO_H
+
+#include <linux/gpio.h>
+#include <linux/types.h>
+#include <linux/compiler.h>
+#include <linux/spinlock_types.h>
+
+struct pgpio_pdata {
+        int base;
+        int ngpio;
+};
+
+struct device;
+
+struct pgpio_chip {
+        struct gpio_chip gc;
+
+        unsigned long (*read_reg)(void __iomem *reg);
+        void (*write_reg)(void __iomem *reg, unsigned long data);
+
+        void __iomem *reg_dat;
+        void __iomem *reg_set;
+        void __iomem *reg_clr;
+        void __iomem *reg_dir;
+
+        /* Number of bits (GPIOs): <register width> * 8. */
+        int bits;
+
+        /*
+         * Some GPIO controllers work with the big-endian bits notation,
+         * e.g. in a 8-bits register, GPIO7 is the least significant bit.
+         */
+        unsigned long (*pin2mask)(struct pgpio_chip *pgc, unsigned int pin);
+
+        /*
+         * Used to lock pgpio_chip->data. Also, this is needed to keep
+         * shadowed and real data registers writes together.
+         */
+        spinlock_t lock;
+
+        /* Shadowed data register to clear/set bits safely. */
+        unsigned long data;
+
+        /* Shadowed direction registers to clear/set direction safely. */
+        unsigned long dir;
+};
+
+static inline struct pgpio_chip *to_pgpio_chip(struct gpio_chip *gc)
+{
+        return container_of(gc, struct pgpio_chip, gc);
+}
+
+int pgpio_remove(struct pgpio_chip *bgc);
+int pgpio_init(struct pgpio_chip *bgc, struct device *dev,
+               unsigned long sz, void __iomem *dat, void __iomem *set,
+               void __iomem *clr, void __iomem *dirout, void __iomem *dirin,
+               unsigned long flags);
+
+#define PGPIOF_BIG_ENDIAN               BIT(0)
+#define PGPIOF_UNREADABLE_REG_SET       BIT(1) /* reg_set is unreadable */
+#define PGPIOF_UNREADABLE_REG_DIR       BIT(2) /* reg_dir is unreadable */
+#define PGPIOF_BIG_ENDIAN_BYTE_ORDER    BIT(3)
+
+#endif /* __BASIC_IOPORT_GPIO_H */
